// ====== –†–û–ó–†–ê–•–£–ù–û–ö –ú–ê–°–ò –¢–Ü–õ–ê ======
// /**
//  * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏
//  * @param {Object} obj
//  * @returns {Number} BMI
//  */
// function calcBMI({ weight, height }) {
//     const numericWeight = Number(weight.replace(',', '.'));
//     const numericHeight = Number(height.replace(',', '.'));
//     return Number((numericWeight / numericHeight ** 2).toFixed(1));
// }

// ======= –ù–û–ú–ï–†–ò –¢–ï–õ–ï–§–û–ù–Ü–í ====
/**
 * 
//  * @param {Object} obj 
//  */
// function printContactsInfo({ names, phones }) {
//     const nameList = names.split(',');
//     const phoneList = phones.split(',');

//     for (let i = 0; i < nameList.length; i += 1) {
//         console.log(`${nameList[i]}: ${phoneList[i]}`);
//     }
// }

// printContactsInfo({
//     names: 'Jacob,William,Solomon,Artemis',
//     phones: '380974565566,380976541236,380974585274,380984179628'
// });

//=========== –ì–õ–ò–ë–û–ö–ê –î–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–Ü–Ø =====
// function getBotReport({ companyName, repairBots, defenceBots }) {
//     return `${companyName} has ${repairBots + defenceBots} bots in stock`;
// }
// console.log(getBotReport({
//     companyName: 'Cyberdyne Systems',
//     repairBots: 150,
//     defenceBots: 50
// }));


//===========  –î–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–Ü–Ø =====
// –§–£–ù–ö–¶–Ü–Ø –í–ò–í–û–î–ò–¢–¨ –†–ï–ü–û–†–¢ –ü–†–û –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –¢–û–í–ê–†–Ü–í –ù–ê –°–ö–õ–ê–î–Ü –ë–£–î–ë-–Ø–ö–û–á –ö–û–ú–ü–ê–ù–Ü–á
// function getStockReport({ companyName, stock }) {
//     let total = 0;
//     for (const value of Object.values(stock)) {
//         total += value;
//     }
//     return `${companyName} has ${total} item in stock`;
// }

// console.log(
//     getStockReport({
//         companyName: 'Cyberdyne Systems',
//         stock: {
//             repairBots: 150,
//             defenceBots: 50
//         }
//     }));

// console.log(
//     getStockReport({
//         companyName: 'Cyberdyne Systems',
//         stock: {
//             shoes: 20,
//             skirts: 10,
//             hats: 5,
//         }
//     })
// );

// ========= SPREAD ========
// –§–£–ù–ö–¶–Ü–Ø –ü–û–í–ï–†–¢–ê–Ñ –ù–û–í–ò–ô –û–ë'–Ñ–ö–¢ –ö–û–ù–¢–ê–ö–¢–£ –ó –î–û–î–ê–ù–ò–ú–ò –í–õ–ê–°–¢–ò–í–û–°–¢–Ø–ú–ò
// ID –¢–ê CREATiD, –ê –¢–ê–ö–û–ñ LIST –ó–Ü –ó–ù–ê–ß–ï–ù–Ø–ú "DEFAULT", –Ø–ö–©–û –í partialContact –ù–ï–ú–ê–Ñ –¢–ê–ö–û–á –í–õ–ê–°–¢–ò–í–û–°–¢–Ü.
// function createContact(partialContact) {
//     return {
//         id: generateID(),
//         createAt: new Date(),
//         list: "default",
//         ...partialContact,
//     }
// }

// console.log(
//     createContact({
//         name: 'Manho',
//         email: 'mango@mail.com',
//         list: 'friends',
//     })
// );
// console.log(
//     createContact({
//         name: 'Poly',
//         email: 'poly@mail.com',
//     }),
// );

// function generateId() {
//     return '_' + Math.random().toString(36).substr(2, 9);
// }

// ========== –û–ü–ï–†–ê–¶–Ü–Ø -- ...REST ========
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—è transformUsername(user) —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞
// –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é fullName, –∑–∞–º—ñ—Å—Ç—å firstName —Ç–∞ lastname.

// function transformUsername({ firstName, lastName, ...props }) {
//     return {
//         fullName: `${firstName} ${lastName}`,
//         ...props
// }
// }
// function transformUsername(user) {
//   const { firstName, lastName, ...otherParams } = user;
//   console.log('Other Params: ', otherParams);
//   const fullName = `${firstName} ${lastName}`;
//
//   return {
//     fullName,
//     ...otherParams
//   }
// }

// console.assertlog(
//     transformUsername({
//         id: 1,
//         firstName: 'Jacob',
//         lastName: 'Mercer',
//         email: 'j.mercer@mail.com',
//         friendsCount: 40,
//     }),
// );

// console.assertlog(
//     transformUsername({
//         id: 2,
//         firstName: 'Adrian',
//         lastName: 'Cross',
//         email: 'a.cross@mail.com',
//         friendsCount: 45,
//     }),
// );

// ====== # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach ======
// ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
//
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
//
//   - `createProduct(obj, callback)` - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂
// –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É
// –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `id` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// - `logProduct(product)` - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤
// –∫–æ–Ω—Å–æ–ª—å
// - `logTotalPrice(product)` - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É
// –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//     const product = {
//         id: Date.now(),
//         ...obj
//     }
//     callback(product)
//     console.log(product);
// }

// function logProduct(obj) {
// console.log(`Product ${obj.name}`);
// }
// function logTotalPrice({price, quantity}) {
// console.log(`Total price ${price * quantity}`);
// }
// createProduct({
//     name: 'apple',
//     price: 30,
//     quantity: 3
// }, logProduct);
// createProduct({
//     name: 'lemon',
//     price: 20,
//     quantity: 5
// }, logTotalPrice);

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);


// ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
//
// –î–æ–¥–∞–π—Ç–µ –≤ –æ–±'—î–∫—Ç `account` –º–µ—Ç–æ–¥–∏ `withdraw(amount, onSuccess, onError)` —Ç–∞
//   `deposit(amount, onSuccess, onError)`, –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞
// –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.
//
//   –ú–µ—Ç–æ–¥ `withdraw` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ
// this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
//
//   –ú–µ—Ç–æ–¥ `deposit` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
// –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
//
// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: 'Jacob',
//     balance: 400,

//     withdraw(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`)
//             return;
//         } else if (this.balance < amount) {
//             onError(`Not enough in the account`);
//             return;
//         }

//         this.balance -= amount;
//         onSuccess(`Transaction complete ${amount}, balance ${this.balance}`);
//     },
//     deposit(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
//             return;
//         } else if (amount <= 0) {
//             onError(`Nice try üòÇ`);
//             return;
//         }

//         this.balance += amount;
//         onSuccess(`Added ${amount}, balance ${this.balance}`);
//     }
// };

// function handleSuccess(message) {
//     console.log(`‚úÖSuccess! ${message}`);
// }

// function handleError(message) {
//     console.log(`‚ùåError! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);


// ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
//
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `each(array, callback)`, —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î
// –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
// –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.
// function each(numbersArr, callback) {
//   let newArr = [];
//   for (const number of numbersArr) {
//     newArr.push(callback(number));
//   }
//   return newArr;
// }
// function sqrtNumber(numberValue) {
//   return Math.sqrt(numberValue);
// }

// console.log(
//   each([64, 49, 36, 25, 16], function (number) {
//     return number * 2;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (numberValue) {
//     return Math.sqrt(numberValue);
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], sqrtNumber)
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// ## Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
//
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –ø–µ—Ä—à–æ—ó –∑–∞–¥–∞—á—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
//

// const createProduct = (partialProduct, callback) => {
//   const newProductObj = {
//     id: Date.now(),
//     ...product
//   }

//   callback(newProductObj);
// }
// const createProduct = (partialProduct, callback) => callback({
//     id: Date.now(),
//     ...partialProduct
//   });

// const logProduct = (product) => {
//     console.log(product);
// }
// const logProduct = product => console.log(product.name);

// function logTotalPrice(product) {
//     console.log(product.price * product.quantity);
// }

// const logTotalPrice = product => console.log(product.price * product.quantity);
// const logTotalPrice = ({ price, quantity }) => console.log(price * quantity);

// createProduct({
//     name: 'üçé',
//     price: 30,
//     quantity: 3
// }, logProduct);
// createProduct({
//     name: 'üçã',
//     price: 20,
//     quantity: 5
// }, logTotalPrice);

// ## Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
//
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞–¥–∞—á—ñ 2 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: 'Jacob',
//     balance: 400,

//     withdraw(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`)
//             return;
//         } else if (this.balance < amount) {
//             onError(`Not enough in the account`);
//             return;
//         }

//         this.balance -= amount;
//         onSuccess(`Transaction complete ${amount}, balance ${this.balance}`);
//     },
//     deposit(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT) {
//             onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
//             return;
//         } else if (amount <= 0) {
//             onError(`Nice try üòÇ`);
//             return;
//         }

//         this.balance += amount;
//         onSuccess(`Added ${amount}, balance ${this.balance}`);
//     }
// };

// const handleSuccess = message => console.log(`‚úÖSuccess! ${message}`);

// const handleError = message => console.log(`‚ùåError! ${message}`);

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// ## Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞–¥–∞—á—ñ 3 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
// //

// function each(numbersArr, callback) {
//   let newArr = [];
//   for (const number of numbersArr) {
//     newArr.push(callback(number));
//   }
//   return newArr;
// }
// function sqrtNumber(numberValue) {
//   return Math.sqrt(numberValue);
// }

// console.log(each([64, 49, 36, 25, 16], number => number * 2));
// console.log(each([64, 49, 36, 25, 16], value => value - 10));
// console.log(each([64, 49, 36, 25, 16], numberValue => Math.sqrt(numberValue);));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));


// ## Example 7 - –ú–µ—Ç–æ–¥ forEach
//
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
//
// function logItems(items) {
//     console.log(items);
//     for (let i = 0; i < items.length; i += 1) {
//         console.log(`${1 + 1} - ${items[i]}`);
//     }
// }

// const logItems = arr => arr.forEach((item, index) => console.log(`${index + 1} - ${item}`));

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

// ## Example 8 - –ú–µ—Ç–æ–¥ forEach
//
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
//
// function calculateAverage(...args) {
//     let total = 0;
//     for (let i = 0; i < args.length; i += 1) {
//         total += args[i];
//     }
//     returntotal / args.length;
// }

// const calculateAverage = (...arr) => {
//     let total = 0;
//     arr.forEach(value => total += value)

//     return total / arr.length
// }

// console.log(calculateAverage(1, 2, 3, 4));
// console.log(calculateAverage(14, 8, 2));
// console.log(calculateAverage(17, 43, 2, 8, 36));




// const printContactsInfo = ({ names, phones }) => {
//   const nameList = names.split(',');
//   const phoneList = phones.split(',');
//
//   nameList.forEach((name, index) => {
//     console.log(`${name}: ${phoneList[index]}`);
//   })
// }
//
// printContactsInfo({
//   names: 'Jacob,William,Solomon,Artemis',
//   phones: '89001234567,89001112233,890055566377,890055566300',
// });
//



//===========  –ú–ï–¢–û–î–ò –ü–ï–†–ï–ë–û–†–£ ========
// ========= –ú–ï–¢–û–î   SORT  =======
// –ú–£–¢–£–Ñ –í–ò–•–Ü–î–ù–ò–ô –ú–ê–°–ò–í

// const sortByAscendingAmount = cars => cars.sort((a, b) => a.price - b.price); ===== –º—É—Ç—É—î!

//=============  SORT —É –∑—Ä–æ—Å—Ç–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É =========

// const sortByAscendingAmount = cars => [...cars].sort(({ price: a }, { price: b }) => a - b);
// console.log(sortByAscendingAmount(cars));


//=============  SORT —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É =========

// const sortByDescendingPrice = cars => [...cars].sort((a, b) => b.price - a.price);
// console.log(sortByDescendingPrice(cars));


//=============  SORT —É –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É —Ç–∞ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ order =========

// const sortByModel = (cars, order) => {
//     if (order === 'asc') {
//         return [...cars].sort((a, b) =>a.model.localeCompare(b.model))
//     } else {
//         return [...cars].sort((a, b) => b.model.localeCompare(a.model))
//     }
// }

// console.table(sortByModel(cars, 'asc'));
// console.table(sortByModel(cars, 'desc'));

// const sortByModel = (cars, order) => [...cars].sort(({ model: a }, { model: b }) => order === 'asc' ? a.localeCompare(b) : b.localeCompare(a));
// console.table(sortByModel(cars, 'asc'));
// console.table(sortByModel(cars, 'desc'));

//============ REDUCE =========

// const getTotalAmount = cars => cars.reduce((acc, { amount }) => acc + amount, 0);
// console.log(getTotalAmount(cars));

//============ –ª–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤ =========
// —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —è–∫—ñ –∑–∞—Ä–∞–∑ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ

// const getModelOnSale = cars => cars.filter(({ onSale }) => onSale).map(({ model }) => model);
// const getModelOnSale = cars => cars.filter(({ onSale }) => onSale).map(({ marke, model }) => `${marke} ${model}`);

// console.log(getModelOnSale(cars));

//============ –ª–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤ =========

// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —Ü—ñ–Ω–∏

// const getSortedCarsOnSale = cars => cars.filter(({ onSale }) => onSale).sort((a, b) => a.price - b.price);
// console.log(getSortedCarsOnSale(cars));

// # –ú–æ–¥—É–ª—å 5. –ó–∞–Ω—è—Ç—Ç—è 10. –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏ —Ç–∞ –∫–ª–∞—Å–∏
//
// ## Example 1 - –ë–ª–æ–≥–µ—Ä
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Blogger` –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
//
// - `email` - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// - `age` - –≤—ñ–∫, —á–∏—Å–ª–æ
// - `numberOfPosts` - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// - `topics` - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
//
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// class Blogger {
//     constructor({ name, age, numberOfPosts, topics }) {
//         this.email = name;
//         this.age = age;
//         this.numberOfPosts = numberOfPosts;
//         this.topics = topics;
//     }
//     getInfo() {
//         return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts.`
//     }
//     updatePostCount(value) {
//         this.numberOfPosts += value
//     }
// }
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ `getInfo()`, —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫:
//   `User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts`.
//
//     –î–æ–¥–∞–π –º–µ—Ç–æ–¥ `updatePostCount(value)`, —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ `value` –ø—Ä–∏–π–º–∞—î
// –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
//
// const mango = new Blogger({
//   email: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts
//
// const poly = new Blogger({
//   email: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts
//

// ## Example 2 - –°—Ö–æ–≤–∏—â–µ
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Storage` —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
// –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ
// –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `items`.
//
//   –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
//
//   - `getItems()` - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// - `addItem(item)` - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// - `removeItem(item)` - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.
//

// class Storage{
//     constructor(items) {
//         this.items = items
//     }
//     getItems() {
//         return this.items;
//     }
//     addItem(item) {
//         if (!this.items.includes(item)) {
//             this.items.push(item)
//             return
//         }

//         return '–¢–∞–∫–∏–π —Ç–æ–≤–∞—Ä –≤–∂–µ —î'
//     }
//     removeItem(item) {
//         if (this.items.includes(item)) {
//         const idx = this.items.indexOf(item);
//         this.items.splice(idx, 1)
//         } else {
//             console.log('product not found');
//         }
        
//     }
// }

// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);
//
// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]
//
// storage.addItem('üçå');
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]
// //
// storage.removeItem('üçã');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]
//

// ## Example 3 - User
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `User` —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `login` —Ç–∞ `email`.
// –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `#login` —Ç–∞ `#email`, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑
// –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä `login` —Ç–∞ `email`.
// class User {
//     #login;
//     #email;
//     constructor({login, email}) {
//         this.#login = login;
//         this.#email = email;
//     }

//     get login() {
//         return this.#login;
//     }
//     set login(newLogin) {
//         if (this.#login !== newLogin) {
//             this.#login = newLogin;
//         }
//     }

//     get email() {
//         return this.#email;
//     }
//     set email() {
//         if (this.#email !== newEmail) {
//             this.#email = newEmail;
//         }
//     }
// }
//// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });
//
// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge
//
// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });
//
// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie

// ## Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Notes` —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `items`.
//   –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `text` —Ç–∞ `priority`. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É
// –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `Priority`, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
//
// class Notes{
//     static Priority = {
//         LOW: 'low',
//         NORMAL: 'normal',
//         HIGH: 'high'
//     }
//     constructor(notes) {
//         this.items = notes
//     }
//     addNote(note) {
//         const inArr = this.items.some(({text}) => text === note.text)
//         if (!inArr) {
//             this.items.push(note)
//         }
//     }
//     removeNote(text) {
//         const idx = this.items.findIndex(({ text: noteText }) =>
//         noteText === text);
//         if (!!~idx) {
//         //    idx !== -1   // idx > -1
//         this.items.splice(idx, 1)
//         }
//     }
//     updatePriority(text, newPriority) {
//         const idx = this.items.findIndex(({ text: noteText }) => noteText === text)
//         if (!!~) {//idx !== -1   // idx > -1
//             this.items[idx].priority = newPriority;
//         }
//     }
// }

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ `addNote(note)`, `removeNote(text)` —Ç–∞
//   `updatePriority(text, newPriority)`.
//
// const myNotes = new Notes([]);
//
// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);
//
// myNotes.addNote({
//   text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);
//
// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// console.log(myNotes.items);
//
// myNotes.updatePriority('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);
//
// ## Example 5 - Toggle
//
// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å `Toggle` —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å `{isOpen: boolean}` —ñ
// –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `on` - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
// –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `on` –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ `false`.
